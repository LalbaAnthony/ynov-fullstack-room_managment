services:
  # ===================================================
  # API GATEWAY
  # ===================================================
  api-gateway:
    build:
      # MODIFIÉ: Le contexte est maintenant la racine du projet
      context: .
      # MODIFIÉ: On spécifie le chemin vers le Dockerfile du service
      dockerfile: ./api-gateway/Dockerfile.dev
    networks:
      - microservices-network
    ports:
      - "4000:4000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=4000
      - SERVICE_USER_URL=http://service-user:7000
      - SERVICE_ROOM_URL=http://service-room:7001
      - SERVICE_TEAM_URL=http://service-team:7002
    depends_on:
      - service-user
      - service-room
      - service-team
    volumes:
      # MODIFIÉ: Montage du code source pour le live-reload (notez le nouveau chemin dans le container)
      - ./api-gateway/src:/app/api-gateway/src
      # CONSERVÉ: Empêche le node_modules local de masquer celui du container
      - /app/node_modules
    restart: unless-stopped

  # ===================================================
  # FRONTEND (Exemple si tu le réactives)
  # ===================================================
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: ./frontend/Dockerfile.dev
  #   networks:
  #     - microservices-network
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - .env
  #   environment:
  #     - NODE_ENV=${NODE_ENV:-development}
  #     - PORT=3000
  #     - NEXT_PUBLIC_API_URL=http://localhost:4000/api
  #   volumes:
  #     # Le chemin du code source pour le live reload
  #     - ./frontend:/app/frontend
  #     # Le dossier .next est généré dans le container, on le garde
  #     - /app/frontend/.next
  #     # On protège le node_modules du container
  #     - /app/node_modules
  #   depends_on:
  #     - api-gateway
  #   restart: unless-stopped

  # ===================================================
  # SERVICE USER
  # ===================================================
  postgres-users:
    image: postgres:15-alpine
    networks:
      - microservices-network
    ports:
      - "9000:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_USER_DB:-users}
      - POSTGRES_USER=${POSTGRES_USER_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_USER_PASSWORD:-password123}
    volumes:
      - pgdata-users:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER_USER:-user} -d ${POSTGRES_USER_DB:-users}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin-users:
    image: dpage/pgadmin4
    networks:
      - microservices-network
    ports:
      - "8000:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USER_EMAIL:-admin@users.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_USER_PASSWORD:-admin123}
    volumes:
      - pgadmin-users:/var/lib/pgadmin
    depends_on:
      - postgres-users
    restart: unless-stopped

  service-user:
    build:
      # MODIFIÉ: Contexte à la racine
      context: .
      # MODIFIÉ: Chemin vers le Dockerfile
      dockerfile: ./service-user/Dockerfile.dev
    networks:
      - microservices-network
    ports:
      - "7000:7000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=7000
      - DATABASE_URL=postgresql://${POSTGRES_USER_USER:-user}:${POSTGRES_USER_PASSWORD:-password123}@postgres-users:5432/${POSTGRES_USER_DB:-users}?sslmode=disable
      - POSTGRES_DB=${POSTGRES_USER_DB:-users}
      - POSTGRES_USER=${POSTGRES_USER_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_USER_PASSWORD:-password123}
      - POSTGRES_HOST=postgres-users
      - POSTGRES_PORT=5432
    volumes:
      # MODIFIÉ: Montage du code source du service
      - ./service-user/src:/app/service-user/src
      # CONSERVÉ: Protège les dépendances du container
      - /app/node_modules
    depends_on:
      postgres-users:
        condition: service_healthy
    restart: unless-stopped

  # ===================================================
  # SERVICE ROOM
  # ===================================================
  postgres-rooms:
    image: postgres:15-alpine
    networks:
      - microservices-network
    ports:
      - "9001:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_ROOM_DB:-rooms}
      - POSTGRES_USER=${POSTGRES_ROOM_USER:-room}
      - POSTGRES_PASSWORD=${POSTGRES_ROOM_PASSWORD:-password123}
    volumes:
      - pgdata-rooms:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_ROOM_USER:-room} -d ${POSTGRES_ROOM_DB:-rooms}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin-rooms:
    image: dpage/pgadmin4:latest
    networks:
      - microservices-network
    ports:
      - "8001:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_ROOM_EMAIL:-admin@rooms.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_ROOM_PASSWORD:-admin123}
    volumes:
      - pgadmin-rooms:/var/lib/pgadmin
    depends_on:
      - postgres-rooms
    restart: unless-stopped

  service-room:
    build:
      # MODIFIÉ: Contexte à la racine
      context: .
      # MODIFIÉ: Chemin vers le Dockerfile
      dockerfile: ./service-room/Dockerfile.dev
    networks:
      - microservices-network
    ports:
      - "7001:7001"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=7001
      - DATABASE_URL=postgresql://${POSTGRES_ROOM_USER:-room}:${POSTGRES_ROOM_PASSWORD:-password123}@postgres-rooms:5432/${POSTGRES_ROOM_DB:-rooms}?sslmode=disable
      - POSTGRES_DB=${POSTGRES_ROOM_DB:-rooms}
      - POSTGRES_USER=${POSTGRES_ROOM_USER:-room}
      - POSTGRES_PASSWORD=${POSTGRES_ROOM_PASSWORD:-password123}
      - POSTGRES_HOST=postgres-rooms
      - POSTGRES_PORT=5432
    volumes:
      # MODIFIÉ: Montage du code source du service
      - ./service-room/src:/app/service-room/src
      # CONSERVÉ: Protège les dépendances du container
      - /app/node_modules
    depends_on:
      postgres-rooms:
        condition: service_healthy
    restart: unless-stopped

  # ===================================================
  # SERVICE TEAM
  # ===================================================
  postgres-teams:
    image: postgres:15-alpine
    networks:
      - microservices-network
    ports:
      - "9002:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_TEAM_DB:-teams}
      - POSTGRES_USER=${POSTGRES_TEAM_USER:-team}
      - POSTGRES_PASSWORD=${POSTGRES_TEAM_PASSWORD:-password123}
    volumes:
      - pgdata-teams:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_TEAM_USER:-team} -d ${POSTGRES_TEAM_DB:-teams}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin-teams:
    image: dpage/pgadmin4:latest
    networks:
      - microservices-network
    ports:
      - "8002:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_TEAM_EMAIL:-admin@teams.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_TEAM_PASSWORD:-admin123}
    volumes:
      - pgadmin-teams:/var/lib/pgadmin
    depends_on:
      - postgres-teams
    restart: unless-stopped

  service-team:
    build:
      # MODIFIÉ: Contexte à la racine
      context: .
      # MODIFIÉ: Chemin vers le Dockerfile
      dockerfile: ./service-team/Dockerfile.dev
    networks:
      - microservices-network
    ports:
      - "7002:7002"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=7002
      - DATABASE_URL=postgresql://${POSTGRES_TEAM_USER:-team}:${POSTGRES_TEAM_PASSWORD:-password123}@postgres-teams:5432/${POSTGRES_TEAM_DB:-teams}?sslmode=disable
      - POSTGRES_DB=${POSTGRES_TEAM_DB:-teams}
      - POSTGRES_USER=${POSTGRES_TEAM_USER:-team}
      - POSTGRES_PASSWORD=${POSTGRES_TEAM_PASSWORD:-password123}
      - POSTGRES_HOST=postgres-teams
      - POSTGRES_PORT=5432
    volumes:
      - ./service-team/src:/app/service-team/src
      - /app/node_modules
    depends_on:
      postgres-teams:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata-users:
    driver: local
  pgdata-rooms:
    driver: local
  pgdata-teams:
    driver: local
  pgadmin-users:
    driver: local
  pgadmin-rooms:
    driver: local
  pgadmin-teams:
    driver: local

networks:
  microservices-network:
    driver: bridge
